const redis = require("redis");
const bluebird = require('bluebird')

const redis_client = redis.createClient({
    host: 'localhost',
    port: '6379',
    //password: ''
});

redis_client.on("error", function(error) {
    console.error(error);
  });


var val;

// function redis_get_wrapper(key) {
//     return new Promise((resolve, reject) => {
//      redis_client.get(key, (err, data) => {
//       if (err) {
//        reject(err)
//        return
//       }
//       if (data) {
//         val = true;
//        resolve(val)
//        return
//       }
//       if(!data){
//           val = false;
//           resolve(false)
//         return
//         }
//      })
//     })
// }
//redis_client.set("missing", "valuz", redis.print);

// var temp;
// function helper() {
//     console.log(temp)
// }

// async function get_wrapper(key){
//     redis_client.get(key, async function(err, data) {
//         if(data){
//             temp = true;
    
//         }
//         else{
//             temp = false;
//         }
    
//     })
// }   

// temp = await()
// console.log(temp)
//redis_client.get("https://v8.dev/", redis.print)

// redis_client.keys('*', function (err, keys) {
//     if (err) return console.log(err);
  
//     for(var i = 0, len = keys.length; i < len; i++) {
//         redis_client.get(keys[i], redis.print)
//     }
//   }); 

// const redis_get_wrapper = (key) => {
//     redis_client.get(key, function(err, data) {
//         return new Promise((data, resolve, reject) => {
//             if(data){
//                 resolve(true)
//             }
//             else{
//                 resolve(false)
//             }
//         })
//     }
// }

// bluebird.promisifyAll(redis.RedisClient.prototype);
// (async () => {
//     var promise1 = redis_client.getAsync("hey").then(function(reply) {
//         return reply
//     });
//     let myval="";
//     console.log(promise1)

//     await thenedPromise; // wait before the promise generated by "then" is resolved

//     console.log(thenedPromise); // logs "foo"
// })()

//call getasync function, returns promise
//from promise run if and else statements based on return 

// const get_wrapper = (key) => {
//     return redis_client.get(key, () => {
//         return key
//     })
// }

// redis_client.get("key", (err, data)=>{
//     if(err){
//       throw err;
//     }
//   });

redis_client.set("key", "value");

if(redis_client.get("key"), (err, data) => {
    if(data){
        return data;
    }
    else{
        return null;
    }
}){
    console.log("exists")
}
else{
    console.log("nope");
}