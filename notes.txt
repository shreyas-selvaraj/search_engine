Notable features:
- all important stuff
- backend:
    - node js, puppeteer, graphql, elasticsearch, redis, 
- frontend
    - React, Apollo, MaterialUI, 
- devops:
- misc: 
- extra:
    - distributing computing for scraping + searching 
    - breadth first using queue 
    - keyword extraction
    - async redis cache across nodes
    - subdomain scanner
    - uses weighted complex elasticsearch queries 
    - concurrently scrapes, scraped over 1 million of most popular domains
    - microservice architecture

TODO:
/*
- come up with algorithm to distribute crawling, need to go to another link if it ends
- some sort page rank algorithm
- add to kubernetes gcp, how to distribute computing
- convert to typescript
- organize files + MAKE CODE NICER AND PROFESSIONAL
- testing/continuous deployment?
- use constant redis server
*/

/*
if crawling ends, search most popular phrase or word, google it then follow links and continue
use page rank with postgres db?
hash function to distribute pages across nodes
need to catch if it can't go to page and continue
fix crawling stopping after there's 1 million domains now, 
*/

/*
page rank
distribute crawling across kubernetes somehow 
constant redis cache
frontend 
catch + handle potential errors 
testing/continuous dev
typescript 
make code look nicer + professional
use ai to make searching better, search history, users?
mobile port?
image search use ai to index? scrape for images, get url of images then display
voice assistant
*/

/*
NOW:
page rank
backend to handle searching 
frontend

don't know:
kubernetes
constant elastic + redis
use the score in elastic results?
dupliate values
*/